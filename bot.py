from pyrogram import Client, filters
import os
import time

# Configura√ß√£o do bot
API_ID = int(os.getenv("27698619"))
API_HASH = os.getenv("910ab6da6964e3b86b20e561f823ebf")
BOT_TOKEN = os.getenv("7843820539:AAHGj-bhPmwCwWHKGGXqTwtjfu_oYtdqMOA")
CANAL_ID = int(os.getenv("-1002421357308"))  # ID do canal onde a transmiss√£o acontecer√°
ADMIN_ID = int(os.getenv("7820632930"))  # Seu ID para receber notifica√ß√µes no privado

app = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# Dicion√°rio para armazenar v√≠deos
videos = {}

@app.on_message(filters.private & filters.video)
async def salvar_video(client, message):
    global videos
    video_id = message.video.file_id
    file_name = f"video_{len(videos) + 1}"
    videos[file_name] = video_id
    await message.reply(f"‚úÖ V√≠deo salvo como **{file_name}**.\nUse `/play {file_name}` para iniciar a transmiss√£o ao vivo no canal.")

@app.on_message(filters.command("play") & filters.private)
async def iniciar_transmissao(client, message):
    global videos
    args = message.text.split(" ", 1)
    
    if len(args) < 2:
        await message.reply("‚ùå Use `/play nome_do_video` para escolher um v√≠deo salvo.")
        return
    
    video_name = args[1]
    
    if video_name not in videos:
        await message.reply("‚ùå Esse v√≠deo n√£o est√° salvo.")
        return

    video_id = videos[video_name]
    await message.reply("üé• Iniciando transmiss√£o ao vivo no canal...")
    
    # Simula o in√≠cio da transmiss√£o ao vivo
    await client.send_video(CANAL_ID, video_id, caption="üî¥ Transmiss√£o ao vivo iniciada!")
    
    # Tempo de transmiss√£o (simula√ß√£o)
    time.sleep(10)  # Substitua pelo tempo real do v√≠deo se necess√°rio
    
    # Finaliza a transmiss√£o
    await client.send_message(CANAL_ID, "Espero que tenha gostado meu amor, me conta o que achou no pv amor <3")
    await client.send_message(ADMIN_ID, "‚úÖ A transmiss√£o terminou com sucesso!")

app.run()
